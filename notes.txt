4/27/2018
After trying to write a data structure to hold the json data using tdd, I realized, I did not need to store all the information.  So holding off on tdd and just getting this done.  I need to find another toy problem to become better with tdd.

4/28/2018
Decided to use an ArrayList to hold all the activities for each runner.  Since uploading all data at once, will be able to sort the activities by start date once at the end of the upload.  In "production" the activites would be added to the end of the ArrayList as they came in.  In a perfect scenario, a runner runs would be spaced out long enough to not have to worry about a newer run being attributed to a runner before an older run.  I do realize there are cases, where this may not be true.

I am falling into a rabbit hole dealing with how to represent the start and end times.  I need to figure out how to pull out the previous and next days date from an Instant.  I need to convert the instant into a LocalDateTime using LocalDateTime.ofInstant().  Will do this tomorrow.  ZoneId needed as well.

4/29/2018
After thinking about it a while yesterday and today, I realzied this code is becoming really complex because of the way java.time libraries.  I am learning as I go. Maybe other languages are not as complex with the date/time.  If I have time after getting this done, I may go back and refactor the date/time.  Saving the start and end times as Instants but only getting them as Strings, I am constantly recreating Instants in order to do calculations.  I still have to hop through other data structures in order to the calculations, since you cannot do these calculations with Instants directly. 

And I am running into another problem with dates.  I need to be able see if activities occurred on the same day or the next day or same week.  In order to convert it into a date based object, I need a time zone.  The original date did not have a time zone, so I am just going to assume everything is in Pacific.

In case you are wondering, I chose to save everything as a java.time.Instant because of the format of the original start and end time.  This was the only built in object that could parse it automatically.  I also thought I needed to keep this time in the same format when I print it out into json again.

4/30/2018
I realize I am writing inefficent code to generate the number of times ran 1km for three days and ran 10k in a week.  To be efficient, go through the actvities once and calculate both.  Right now, I am calculating each in their own run of the actviites.

After writing out and testing the code for the askes, I did not include the type of run it was.  Depending on the type, some information is missing.  Will need to look into this.  Added some tests. It doesn't matter.  Yay!

I am taking some sort cuts due to time constraints.  Normally, I would use some sort of interface between getting the data and the main runniing object.  I just want to get this done.  I have never used the Java json parser before and I expect this to take some time.

Fell down deep rabbit hole of JSON parsing and file reading in Java. But I figured it out.  

Now to write the static class to run everything.  I just need to get this done.
